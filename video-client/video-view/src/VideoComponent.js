import React, { Component } from 'react';
import Video from 'twilio-video';
import RaisedButton from 'material-ui/RaisedButton';
import TextField from 'material-ui/TextField';
import { Card, CardText } from 'material-ui/Card';
import AppBar from 'material-ui/AppBar';
import Typography from '@material-ui/core/Typography';
import Toolbar from '@material-ui/core/Toolbar';
import AddAPhotoIcon from '@material-ui/icons/AddAPhoto';
import VolumeUpIcon from '@material-ui/icons/VolumeUp';
import VolumeOffIcon from '@material-ui/icons/VolumeOff';
import PlayArrowIcon from '@material-ui/icons/PlayArrow';
import PauseIcon from '@material-ui/icons/Pause';
import * as faceapi from 'face-api.js';


import { loadModels } from './api/face';

const timerStyle = {
  fontSize: '2rem',
  color: '#ff0080',
  fontWeight: 'bold',
  marginTop: '1rem'
}

class VideComponent extends Component {
    constructor(props) {
        super(props);

        this.state = {
            identity: null,  /* Will hold the fake name assigned to the client. The name is generated by faker on the server */
            roomName: '',    /* Will store the room name */
            roomNameErr: false,  /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */
            previewTracks: null,
            localMediaAvailable: false, /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */
            hasJoinedRoom: false,
            activeRoom: null,
            token: '',
            imageURI: '',
            timer: 3,
            startCamera: false,
        };

        this.handleRoomNameChange = this.handleRoomNameChange.bind(this);
        this.joinRoom = this.joinRoom.bind(this);
        this.roomJoined = this.roomJoined.bind(this);
        this.leaveRoom = this.leaveRoom.bind(this);
        this.detachParticipantTracks = this.detachParticipantTracks.bind(this);
        this.detachTracks = this.detachTracks.bind(this);
        this.counter = this.counter.bind(this);
        this.muteAudio = this.muteAudio.bind(this);
        this.unmuteAudio = this.unmuteAudio.bind(this);
        this.hideVideo = this.hideVideo.bind(this);
        this.showVideo = this.showVideo.bind(this);
    }

    componentWillMount = async () => {
      await loadModels();
    }

    componentDidMount() {
        fetch('https://sienna-kakapo-9904.twil.io/client_kyc', {
            method: 'get',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json'
            },
        }).then(res => res.json())
        .then(json => {
            this.setState({
                identity: json.identiy,
                token: json.token
            }, () => {
                console.log(this.state.identity)
                console.log(this.state.token);
            })
        })
    }

    handleRoomNameChange(e) {
        /* Fetch room name from text field and update state */
        let roomName = e.target.value; 
        this.setState({ roomName });
    }

    joinRoom() {
        /* 
     Show an error message on room name text field if user tries         joining a room without providing a room name. This is enabled by setting `roomNameErr` to true
       */
             if (!this.state.roomName.trim()) {
                 this.setState({ roomNameErr: true });
                 return;
             }
     
             console.log("Joining room '" + this.state.roomName + "'...");
             let connectOptions = {
                audio: true,
                name: this.state.roomName,
                video: {
                  width: 400
                }
             };
     
             if (this.state.previewTracks) {
                 connectOptions.tracks = this.state.previewTracks;
             }
     
             /* 
     Connect to a room by providing the token and connection    options that include the room name and tracks. We also show an alert if an error occurs while connecting to the room.    
     */  
     Video.connect(this.state.token, connectOptions).then(this.roomJoined, error => {
       alert('Could not connect to Twilio: ' + error.message);
     });
     // remove this fetch if you just want to do a standalone demo
     fetch('https://sienna-kakapo-9904.twil.io/video_kyc', {
       method: 'post',
       headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          room: this.state.roomName,
          identity: this.state.identity
        })
     }).then(res => res.json())
     .then(json => console.log(json))
    }

    // Attach the Tracks to the DOM.
    attachTracks(tracks, container) {
        tracks.forEach(track => {
        container.appendChild(track.attach());
        });
        if (container.querySelector('video')) {
          document.getElementsByTagName('video')[0].addEventListener('play', () => {
            const videoTag = document.getElementsByTagName('video')[0];
            const canvas = faceapi.createCanvasFromMedia(videoTag);
            document.body.append(canvas);
            const displaySize = { width: 400, height: 400 };
            faceapi.matchDimensions(canvas, displaySize)
            setInterval(async () => {
              const detections = await faceapi.detectAllFaces(videoTag, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();
              const resizedDetections = faceapi.resizeResults(detections, displaySize)
              canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height)
              faceapi.draw.drawDetections(canvas, resizedDetections)
            }, 100)
          });
        }
    }
    
    // Attach the Participant's Tracks to the DOM.
    attachParticipantTracks(participant, container) {
        var tracks = Array.from(participant.tracks.values());
        this.attachTracks(tracks, container);
    }

    roomJoined(room) {
        // Called when a participant joins a room
        console.log("Joined as '" + this.state.identity + "'");
        this.setState({
          activeRoom: room,
          localMediaAvailable: true,
          hasJoinedRoom: true  // Removes ‘Join Room’ button and shows ‘Leave Room’
        });
      
        // Attach LocalParticipant's tracks to the DOM, if not already attached.
        var previewContainer = this.refs.localMedia;
        console.log(previewContainer)
        if (!previewContainer.querySelector('video')) {
          this.attachParticipantTracks(room.localParticipant, previewContainer);
        }
          // ... more event listeners
  
        // Attach the Tracks of the room's participants.
        room.participants.forEach(participant => {
            console.log("Already in Room: '" + participant.identity + "'");
            var previewContainer = this.refs.remoteMedia;
            this.attachParticipantTracks(participant, previewContainer);
        });

        // Participant joining room
        room.on('participantConnected', participant => {
            console.log("Joining: '" + participant.identity + "'");
        });

  
      // Attach participant’s tracks to DOM when they add a track
      room.on('trackAdded', (track, participant) => {
        console.log(participant.identity + ' added track: ' + track.kind);
        var previewContainer = this.refs.remoteMedia;
        this.attachTracks([track], previewContainer);
      });
  
      // Detach participant’s track from DOM when they remove a track.
      room.on('trackRemoved', (track, participant) => {
        this.log(participant.identity + ' removed track: ' + track.kind);
        this.detachTracks([track]);
      });
  
      // Detach all participant’s track when they leave a room.
      room.on('participantDisconnected', participant => {
        console.log("Participant '" + participant.identity + "' left the room");
        this.detachParticipantTracks(participant);
      });
  
      // Once the local participant leaves the room, detach the Tracks
      // of all other participants, including that of the LocalParticipant.
      room.on('disconnected', () => {
        if (this.state.previewTracks) {
          this.state.previewTracks.forEach(track => {
            track.stop();
          });
        }
        this.detachParticipantTracks(room.localParticipant);
        room.participants.forEach(this.detachParticipantTracks);
        this.state.activeRoom = null;
        this.setState({ hasJoinedRoom: false, localMediaAvailable: false });
      });

    }

    leaveRoom() {
        this.state.activeRoom.disconnect();
        this.setState({ hasJoinedRoom: false, localMediaAvailable: false });
    }

    detachTracks(tracks) {
        tracks.forEach(track => {
          track.detach().forEach(detachedElement => {
            detachedElement.remove();
          });
        });
      }
    
    detachParticipantTracks(participant) {
      var tracks = Array.from(participant.tracks.values());
      this.detachTracks(tracks);
    }

    screenCapture() {
      var remote = document.getElementById('localMedia');
      var video = remote.getElementsByTagName('video')[0];
      var canvas = document.createElement('canvas');
      canvas.width = 400;
      canvas.height = 300;
      var ctx = canvas.getContext('2d');
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      var dataURI = canvas.toDataURL('image/jpeg');
      this.setState({ imageURI: dataURI, timer: 3, startCamera: false });
    }

    counter() {
      this.setState({ startCamera: true });
      let interval = setInterval(() => {this.setState({ timer: this.state.timer - 1 },
        () => { 
          if (this.state.timer <= 0) {
            clearInterval(interval);
            this.screenCapture();
          }
         } )}, 1000)
    }

    muteAudio() {
      this.state.activeRoom.localParticipant.audioTracks.forEach(function(track) {
        track.disable();
      });
    }

    unmuteAudio() {
      this.state.activeRoom.localParticipant.audioTracks.forEach(function(track) {
        track.enable();
      });
    }

    hideVideo() {
      this.state.activeRoom.localParticipant.videoTracks.forEach((track) => {
        track.disable();
      });
    }

    showVideo() {
      this.state.activeRoom.localParticipant.videoTracks.forEach((track) => {
        track.enable();
      });
    }

    render() {
          /* 
        Controls showing of the local track
        Only show video track after user has joined a room else show nothing 
        */
        let showLocalTrack = this.state.localMediaAvailable ? (
            <div className="flex-item"><div ref="localMedia" id="localMedia" /> </div>) : '';   
        /*
        Controls showing of ‘Join Room’ or ‘Leave Room’ button.  
        Hide 'Join Room' button if user has already joined a room otherwise 
        show `Leave Room` button.
        */
        let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (
        <RaisedButton label="Leave Room" secondary={true} onClick={this.leaveRoom}  />) : (
        <RaisedButton label="Join Room" primary={true} onClick={this.joinRoom} />);
        return (
              <div>
                <AppBar position="static" style={{ background: '#00BA51', flexGrow: 1}}>
                  <Toolbar style={{paddingRight: '47%'}}>
                    <Typography variant="h5" style={{color: '#FFFFFF', fontWeight: 'bold', letterSpacing: '0.3rem'}}>
                      GRAB
                    </Typography>
                  </Toolbar>
                </AppBar>

                <Card>
                    <CardText>
                    <div className="flex-container">
                    {showLocalTrack} {/* Show local track if available */}
                    <div className="flex-item">
                    {/* 
                The following text field is used to enter a room name. It calls  `handleRoomNameChange` method when the text changes which sets the `roomName` variable initialized in the state.
                    */}
                    <TextField hintText="Enter Phone number" onChange={this.handleRoomNameChange} 
                errorText = {this.state.roomNameErr ? 'Room Name is required' : undefined} 
                    /><br />
                    {joinOrLeaveRoomButton}  {/* Show either ‘Leave Room’ or ‘Join Room’ button */}
                    <div className="video-control">
                        <button className="button" onClick={this.hideVideo} primary={true}><PauseIcon /></button>
                        <button className="button" onClick={this.showVideo} primary={true}><PlayArrowIcon /></button>
                        <button className="button" onClick={this.muteAudio} primary={true}><VolumeOffIcon /></button>
                        <button className="button" onClick={this.unmuteAudio} primary={true}><VolumeUpIcon /></button>
                        <button className="button" onClick={this.counter} primary={true}><AddAPhotoIcon /></button>
                      </div>
                      <div>
                      { this.state.startCamera ? <div className="timer" style={timerStyle}>{this.state.timer}</div> : null }
                      <img src={this.state.imageURI} className="img" />
                      </div>
                    </div>
                    {/* 
                The following div element shows all remote media (other                             participant’s tracks) 
                    */}
                    <div className="flex-item" ref="remoteMedia" id="remote-media" />
                    </div>
                    </CardText>
                </Card>
              </div>
        );
    }
}

export default VideComponent;
