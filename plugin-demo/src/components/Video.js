import React from 'react';
import Video from 'twilio-video';

import { Icon } from '@twilio/flex-ui';

const VideoKycStyle = {
    textAlign: 'center',
    margin: '1rem',
    width: '100%',
}

const localMediaStyle = {
    marginTop: '0.5rem',
    background: '#00BA51',
    padding: '0.5rem'
}

const remoteMediaStyle = {
    marginBottom: '0.5rem',
}

const videoControlStyle = {
  marginTop: '0.5rem',
  display: 'grid',
  gridTemplateColumns: '1fr 1fr 1fr 1fr 1fr'
}

const timerStyle = {
  fontSize: '1.5rem',
  color: '#ff0080',
  fontWeight: 'bold'
}

const buttonStyle = {
  border: 'none',
  background: '#00BA51'
}

const imgStyle = {
  marginTop: '0.5rem'
}

class VideoKyc extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            identity: null,  /* Will hold the fake name assigned to the client. The name is generated by faker on the server */
            roomName: '',    /* Will store the room name */
            roomNameErr: false,  /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */
            previewTracks: null,
            localMediaAvailable: false, /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */
            hasJoinedRoom: false,
            activeRoom: null,
            token: '',
            imageURI: '',
            timer: 3,
            startCamera: false,
        };

        this.roomJoined = this.roomJoined.bind(this);
        this.leaveRoom = this.leaveRoom.bind(this);
        this.detachParticipantTracks = this.detachParticipantTracks.bind(this);
        this.detachTracks = this.detachTracks.bind(this);
        this.screenCapture = this.screenCapture.bind(this);
        this.counter = this.counter.bind(this);
        this.muteAudio = this.muteAudio.bind(this);
        this.unmuteAudio = this.unmuteAudio.bind(this);
        this.hideVideo = this.hideVideo.bind(this);
        this.showVideo = this.showVideo.bind(this);
    }

    componentDidMount() {
        console.log("Joining room '" + this.props.room + "'...");
        let connectOptions = {
            audio: true,
            name: this.props.room,
            video: {
              width: 100
            }
        };

        if (this.state.previewTracks) {
            connectOptions.tracks = this.state.previewTracks;
        }

        Video.connect(this.props.token, connectOptions).then(this.roomJoined, error => {
            alert('Could not connect to Twilio: ' + error.message);
        });
    }

        // Attach the Tracks to the DOM.
    attachTracks(tracks, container) {
        tracks.forEach(track => {
            container.appendChild(track.attach());
        });
    }
        
        // Attach the Participant's Tracks to the DOM.
    attachParticipantTracks(participant, container) {
        var tracks = Array.from(participant.tracks.values());
        this.attachTracks(tracks, container);
    }

    roomJoined(room) {
        // Called when a participant joins a room
        console.log("Joined as '" + this.state.identity + "'");
        this.setState({
          activeRoom: room,
          localMediaAvailable: true,
          hasJoinedRoom: true  // Removes ‘Join Room’ button and shows ‘Leave Room’
        });
      
        // Attach LocalParticipant's tracks to the DOM, if not already attached.
        var previewContainer = this.refs.localMedia;
        if (!previewContainer.querySelector('video')) {
          this.attachParticipantTracks(room.localParticipant, previewContainer);
        }
          // ... more event listeners
  
        // Attach the Tracks of the room's participants.
        room.participants.forEach(participant => {
            console.log("Already in Room: '" + participant.identity + "'");
            var previewContainer = this.refs.remoteMedia;
            console.log(previewContainer);
            this.attachParticipantTracks(participant, previewContainer);
        });

        // Participant joining room
        room.on('participantConnected', participant => {
            console.log("Joining: '" + participant.identity + "'");
        });

  
      // Attach participant’s tracks to DOM when they add a track
      room.on('trackAdded', (track, participant) => {
        console.log(participant.identity + ' added track: ' + track.kind);
        var previewContainer = this.refs.remoteMedia;
 
        this.attachTracks([track], previewContainer);
      });
  
      // Detach participant’s track from DOM when they remove a track.
      room.on('trackRemoved', (track, participant) => {
        this.log(participant.identity + ' removed track: ' + track.kind);
        this.detachTracks([track]);
      });
  
      // Detach all participant’s track when they leave a room.
      room.on('participantDisconnected', participant => {
        console.log("Participant '" + participant.identity + "' left the room");
        this.detachParticipantTracks(participant);
      });
  
      // Once the local participant leaves the room, detach the Tracks
      // of all other participants, including that of the LocalParticipant.
      room.on('disconnected', () => {
        if (this.state.previewTracks) {
          this.state.previewTracks.forEach(track => {
            track.stop();
          });
        }
        this.detachParticipantTracks(room.localParticipant);
        room.participants.forEach(this.detachParticipantTracks);
        this.state.activeRoom = null;
        this.setState({ hasJoinedRoom: false, localMediaAvailable: false });
      });

    }

    leaveRoom() {
        this.state.activeRoom.disconnect();
        this.setState({ hasJoinedRoom: false, localMediaAvailable: false });
    }

    detachTracks(tracks) {
        tracks.forEach(track => {
          track.detach().forEach(detachedElement => {
            detachedElement.remove();
          });
        });
      }
    
    detachParticipantTracks(participant) {
      var tracks = Array.from(participant.tracks.values());
      this.detachTracks(tracks);
    }

    screenCapture() {
      var remote = document.getElementById('remote-media');
      var video = remote.getElementsByTagName('video')[0];
      var canvas = document.createElement('canvas');
      canvas.width = 300;
      canvas.height = 225;
      var ctx = canvas.getContext('2d');
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      var dataURI = canvas.toDataURL('image/jpeg');
      this.setState({ imageURI: dataURI, timer: 3, startCamera: false });
    }

    counter() {
      this.setState({ startCamera: true });
      let interval = setInterval(() => {this.setState({ timer: this.state.timer - 1 },
        () => { 
          if (this.state.timer <= 0) {
            clearInterval(interval);
            this.screenCapture();
          }
         } )}, 1000)
    }

    muteAudio() {
      this.state.activeRoom.localParticipant.audioTracks.forEach(function(track) {
        track.disable();
      });
    }

    unmuteAudio() {
      this.state.activeRoom.localParticipant.audioTracks.forEach(function(track) {
        track.enable();
      });
    }

    hideVideo() {
      this.state.activeRoom.localParticipant.videoTracks.forEach((track) => {
        track.disable();
      });
    }

    showVideo() {
      this.state.activeRoom.localParticipant.videoTracks.forEach((track) => {
        track.enable();
      });
    }

    render() {
        /* 
            Controls showing of the local track
            Only show video track after user has joined a room else show nothing 
            */
        let showLocalTrack = this.state.localMediaAvailable ? (
            <div className="flex-item"><div ref="localMedia" id="localMedia" style={localMediaStyle} /> </div>) : '';   
        /*
        Controls showing of ‘Join Room’ or ‘Leave Room’ button.  
        Hide 'Join Room' button if user has already joined a room otherwise 
        show `Leave Room` button.
        */
 
        return (
              <div style={ VideoKycStyle }>
                <div className="flex-container">

                  <div className="video-container">
                    <div className="flex-item" ref="remoteMedia" id="remote-media" style={ remoteMediaStyle } />
                    {showLocalTrack} {/*Show local track if available*/}
                  </div>

                  <div className="video-control" style={videoControlStyle}>
                    <button onClick={this.hideVideo} style={buttonStyle}><Icon icon="HoldBold"/></button>
                    <button onClick={this.showVideo} style={buttonStyle}><Icon icon="Hold"/></button>
                    <button onClick={this.muteAudio} style={buttonStyle}><Icon icon="Mute"/></button>
                    <button onClick={this.unmuteAudio} style={buttonStyle}><Icon icon="MuteBold"/></button>
                    <button onClick={this.counter} style={buttonStyle}><Icon icon="EyeBold"/></button>
                  </div>
                  { this.state.startCamera ? <div style={timerStyle}>{this.state.timer}</div> : null }
                  <img src={this.state.imageURI} style={imgStyle} />
                </div>
              </div>
            );
    }
}

export default VideoKyc;
